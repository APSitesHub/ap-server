#!/usr/bin/env node

/* eslint-disable camelcase */
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ appointments –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
 */

const AltegioAppointments = require("../../db/models/altegioAppointments");
require("dotenv").config();

async function getAppointmentsStats() {
  try {
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    require("../../db/connection");
    
    console.log("üìä –ê–Ω–∞–ª—ñ–∑ appointments –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö...\n");
    
    // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    const totalCount = await AltegioAppointments.countDocuments();
    console.log(`üìà –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å appointments: ${totalCount}`);
    
    // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–∏—Ö
    const deletedCount = await AltegioAppointments.countDocuments({ isDeleted: true });
    console.log(`üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–∏—Ö: ${deletedCount}`);
    
    // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö
    const activeCount = totalCount - deletedCount;
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö: ${activeCount}`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    console.log("\nüìã –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è:");
    const statusStats = await AltegioAppointments.aggregate([
      { $match: { isDeleted: false } },
      {
        $group: {
          _id: "$status",
          count: { $sum: 1 }
        }
      },
      { $sort: { "_id": 1 } }
    ]);
    
    const statusLabels = {
      '0': 'Pending (–û—á—ñ–∫—É—î—Ç—å—Å—è)',
      '1': 'Arrived (–ü—Ä–∏–π—à–æ–≤)',
      '-1': 'No-show (–ù–µ –∑\'—è–≤–∏–≤—Å—è)',
      '2': 'Confirmed (–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ)'
    };
    
    statusStats.forEach(stat => {
      const label = statusLabels[stat._id] || `–ù–µ–≤—ñ–¥–æ–º–∏–π (${stat._id})`;
      console.log(`  ${label}: ${stat.count}`);
    });
    
    // –¢–æ–ø-5 –≤—á–∏—Ç–µ–ª—ñ–≤
    console.log("\nüë®‚Äçüè´ –¢–æ–ø-5 –≤—á–∏—Ç–µ–ª—ñ–≤ –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ appointments:");
    const teacherStats = await AltegioAppointments.aggregate([
      { $match: { isDeleted: false } },
      {
        $group: {
          _id: {
            teacherId: "$teacherId",
            teacherName: "$teacherName"
          },
          count: { $sum: 1 }
        }
      },
      { $sort: { count: -1 } },
      { $limit: 5 }
    ]);
    
    teacherStats.forEach((teacher, index) => {
      console.log(`  ${index + 1}. ${teacher._id.teacherName}: ${teacher.count}`);
    });
    
    // –¢–æ–ø-5 —Å–µ—Ä–≤—ñ—Å—ñ–≤
    console.log("\nüéì –¢–æ–ø-5 —Å–µ—Ä–≤—ñ—Å—ñ–≤:");
    const serviceStats = await AltegioAppointments.aggregate([
      { $match: { isDeleted: false } },
      {
        $group: {
          _id: {
            serviceId: "$serviceId",
            serviceName: "$serviceName"
          },
          count: { $sum: 1 }
        }
      },
      { $sort: { count: -1 } },
      { $limit: 5 }
    ]);
    
    serviceStats.forEach((service, index) => {
      console.log(`  ${index + 1}. ${service._id.serviceName}: ${service.count}`);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞—Ö
    console.log("\nüìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞–º:");
    
    // –ù–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π —Ç–∞ –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π –∑–∞–ø–∏—Å
    const dateRange = await AltegioAppointments.aggregate([
      { $match: { isDeleted: false } },
      {
        $group: {
          _id: null,
          minDate: { $min: "$startDateTime" },
          maxDate: { $max: "$startDateTime" }
        }
      }
    ]);
    
    if (dateRange.length > 0) {
      const range = dateRange[0];
      console.log(`  –ù–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π —É—Ä–æ–∫: ${range.minDate.toISOString().split('T')[0]}`);
      console.log(`  –ù–∞–π–Ω–æ–≤—ñ—à–∏–π —É—Ä–æ–∫: ${range.maxDate.toISOString().split('T')[0]}`);
    }
    
    // Appointments –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    const recentCount = await AltegioAppointments.countDocuments({
      isDeleted: false,
      startDateTime: { $gte: thirtyDaysAgo }
    });
    
    console.log(`  –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤: ${recentCount}`);
    
    // Appointments –Ω–∞ –º–∞–π–±—É—Ç–Ω—î
    const futureCount = await AltegioAppointments.countDocuments({
      isDeleted: false,
      startDateTime: { $gte: new Date() }
    });
    
    console.log(`  –ú–∞–π–±—É—Ç–Ω—ñ —É—Ä–æ–∫–∏: ${futureCount}`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    console.log("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏:");
    const duplicates = await AltegioAppointments.aggregate([
      {
        $group: {
          _id: "$appointmentId",
          count: { $sum: 1 },
          docs: { $push: "$_id" }
        }
      },
      {
        $match: {
          count: { $gt: 1 }
        }
      }
    ]);
    
    if (duplicates.length > 0) {
      console.log(`  ‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω–æ ${duplicates.length} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø–æ appointmentId`);
      duplicates.forEach(dup => {
        console.log(`    appointmentId ${dup._id}: ${dup.count} –∑–∞–ø–∏—Å—ñ–≤`);
      });
    } else {
      console.log("  ‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }
    
    console.log("\n" + "=".repeat(50));
    console.log("üìä –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ:", error.message);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
async function removeDuplicates() {
  console.log("üßπ –ü–æ—á–∞—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤...");
  
  const duplicates = await AltegioAppointments.aggregate([
    {
      $group: {
        _id: "$appointmentId",
        count: { $sum: 1 },
        docs: { $push: { id: "$_id", createdAt: "$createdAt" } }
      }
    },
    {
      $match: {
        count: { $gt: 1 }
      }
    }
  ]);
  
  let removedCount = 0;
  
  for (const duplicate of duplicates) {
    // –ó–∞–ª–∏—à–∞—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π –∑–∞–ø–∏—Å, –≤–∏–¥–∞–ª—è—î–º–æ —Ä–µ—à—Ç—É
    const sortedDocs = duplicate.docs.sort((a, b) => a.createdAt - b.createdAt);
    const toRemove = sortedDocs.slice(1); // –í—Å—ñ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ
    
    for (const doc of toRemove) {
      await AltegioAppointments.deleteOne({ _id: doc.id });
      removedCount++;
    }
  }
  
  console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${removedCount} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤`);
}

async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    console.log(`
–ê–Ω–∞–ª—ñ–∑ appointments –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö

Usage:
  node statsCheck.js              - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  node statsCheck.js --clean      - –í–∏–¥–∞–ª–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏
  node statsCheck.js --help       - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–ø–æ–º–æ–≥—É

Examples:
  node statsCheck.js
  node statsCheck.js --clean
`);
    process.exit(0);
  }
  
  if (args.includes('--clean')) {
    require("../../db/connection");
    await removeDuplicates();
    process.exit(0);
  }
  
  await getAppointmentsStats();
  process.exit(0);
}

main();
