#!/usr/bin/env node

/* eslint-disable camelcase */
/**
 * –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Altegio API
 */

const { altegioGet } = require('../../services/altegio/altegioAuth');
require('dotenv').config();

async function testConnection() {
  console.log("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Altegio API...\n");
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
  console.log("1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è:");
  
  const requiredVars = ['ALTEGIO_COMPANY_ID', 'ALTEGIO_COMPANY_TOKEN', 'ALTEGIO_USER_TOKEN'];
  const missingVars = [];
  
  requiredVars.forEach(varName => {
    if (process.env[varName]) {
      console.log(`  ‚úÖ ${varName}: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
    } else {
      console.log(`  ‚ùå ${varName}: –≤—ñ–¥—Å—É—Ç–Ω—è`);
      missingVars.push(varName);
    }
  });
  
  if (missingVars.length > 0) {
    console.log(`\n‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ: ${missingVars.join(', ')}`);
    console.log("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö —É —Ñ–∞–π–ª—ñ .env –∞–±–æ –≤ —Å–∏—Å—Ç–µ–º—ñ");
    process.exit(1);
  }
  
  console.log("\n2Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –∑–∞–ø–∏—Ç—É:");
  
  try {
    // –†–æ–±–∏–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç - —Ç—ñ–ª—å–∫–∏ 1 –∑–∞–ø–∏—Å –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    const today = new Date().toISOString().split('T')[0];
    
    console.log(`  üìÖ –ó–∞–ø–∏—Ç—É—î–º–æ appointments –∑–∞ ${today}...`);
    
    const response = await altegioGet(
      `https://api.alteg.io/api/v1/records/${process.env.ALTEGIO_COMPANY_ID}`,
      {
        params: {
          page: 1,
          count: 1,
          start_date: today,
          end_date: today,
        },
      }
    );
    
    console.log("  ‚úÖ API –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π!");
    console.log(`  üìä –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.status}`);
    console.log(`  üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: ${response.data.data?.length || 0}`);
    
    if (response.data.data && response.data.data.length > 0) {
      const appointment = response.data.data[0];
      console.log(`  üìã –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Å—É: ID ${appointment.id}, –∫–ª—ñ—î–Ω—Ç: ${appointment.client?.name || 'N/A'}`);
    }
    
  } catch (error) {
    console.log("  ‚ùå –ü–æ–º–∏–ª–∫–∞ API –∑–∞–ø–∏—Ç—É:");
    
    if (error.response) {
      console.log(`    –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.log(`    –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error.response.data?.message || error.response.statusText}`);
      
      if (error.response.status === 401) {
        console.log("    üí° –ú–æ–∂–ª–∏–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Ç–æ–∫–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó");
      } else if (error.response.status === 404) {
        console.log("    üí° –ú–æ–∂–ª–∏–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π company_id");
      } else if (error.response.status === 429) {
        console.log("    üí° –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ - —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ");
      }
    } else {
      console.log(`    ${error.message}`);
    }
    
    process.exit(1);
  }
  
  console.log("\n3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:");
  
  try {
    require("../../db/connection");
    const AltegioAppointments = require("../../db/models/altegioAppointments");
    
    console.log("  ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    
    const count = await AltegioAppointments.countDocuments();
    console.log(`  üìä –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å appointments –≤ –ë–î: ${count}`);
    
  } catch (error) {
    console.log("  ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:");
    console.log(`    ${error.message}`);
    console.log("    üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ MongoDB –∑–∞–ø—É—â–µ–Ω–∞ —Ç–∞ DB_URI –ø—Ä–∞–≤–∏–ª—å–Ω–∞");
    process.exit(1);
  }
  
  console.log("\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û!");
  console.log("‚úÖ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é appointments");
  console.log("\n–ü—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–º–∞–Ω–¥:");
  console.log("  npm run sync-appointments today");
  console.log("  npm run sync-appointments yesterday");
  console.log("  npm run appointments-stats");
  
  process.exit(0);
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
process.on('unhandledRejection', (error) => {
  console.error("\n‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:");
  console.error(error.message);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É
testConnection();
