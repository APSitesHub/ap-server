#!/usr/bin/env node

/* eslint-disable camelcase */
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö appointments
 */

const AltegioAppointments = require("../../db/models/altegioAppointments");
require("dotenv").config();

async function validateAppointments() {
  try {
    require("../../db/connection");
    
    console.log("üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è appointments –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö...\n");
    
    let issuesFound = 0;
    
    // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
    console.log("1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤:");
    
    const requiredFields = [
      'appointmentId',
      'leadId', 
      'leadName',
      'teacherId',
      'teacherName',
      'serviceId',
      'serviceName',
      'startDateTime',
      'endDateTime',
      'status'
    ];
    
    for (const field of requiredFields) {
      const count = await AltegioAppointments.countDocuments({
        [field]: { $in: [null, undefined, ""] }
      });
      
      if (count > 0) {
        console.log(`  ‚ùå ${field}: ${count} –∑–∞–ø–∏—Å—ñ–≤ –∑ –ø—É—Å—Ç–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏`);
        issuesFound += count;
      } else {
        console.log(`  ‚úÖ ${field}: –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ`);
      }
    }
    
    // 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç
    console.log("\n2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞—Ç:");
    
    const invalidDates = await AltegioAppointments.find({
      $or: [
        { startDateTime: { $type: "string" } },
        { endDateTime: { $type: "string" } },
        { startDateTime: { $gte: "$endDateTime" } }
      ]
    });
    
    if (invalidDates.length > 0) {
      console.log(`  ‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ ${invalidDates.length} –∑–∞–ø–∏—Å—ñ–≤ –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –¥–∞—Ç–∞–º–∏`);
      issuesFound += invalidDates.length;
    } else {
      console.log("  ‚úÖ –í—Å—ñ –¥–∞—Ç–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ");
    }
    
    // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ leadId —Ñ–æ—Ä–º–∞—Ç—É
    console.log("\n3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É leadId:");
    
    const invalidLeadIds = await AltegioAppointments.find({
      leadId: { $not: /^\d+$/ }
    });
    
    if (invalidLeadIds.length > 0) {
      console.log(`  ‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ ${invalidLeadIds.length} –∑–∞–ø–∏—Å—ñ–≤ –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º leadId (–Ω–µ —á–∏—Å–ª–æ)`);
      invalidLeadIds.forEach(record => {
        console.log(`    - appointmentId: ${record.appointmentId}, leadId: "${record.leadId}"`);
      });
      issuesFound += invalidLeadIds.length;
    } else {
      console.log("  ‚úÖ –í—Å—ñ leadId –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ");
    }
    
    // 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—ñ–≤
    console.log("\n4Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—ñ–≤:");
    
    const validStatuses = ['0', '1', '-1', '2'];
    const invalidStatuses = await AltegioAppointments.find({
      status: { $nin: validStatuses }
    });
    
    if (invalidStatuses.length > 0) {
      console.log(`  ‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ ${invalidStatuses.length} –∑–∞–ø–∏—Å—ñ–≤ –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º`);
      const uniqueStatuses = [...new Set(invalidStatuses.map(r => r.status))];
      console.log(`    –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏: ${uniqueStatuses.join(', ')}`);
      issuesFound += invalidStatuses.length;
    } else {
      console.log("  ‚úÖ –í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ");
    }
    
    // 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ –¥–æ–≤–≥—ñ –∞–±–æ –∫–æ—Ä–æ—Ç–∫—ñ —É—Ä–æ–∫–∏
    console.log("\n5Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —É—Ä–æ–∫—ñ–≤:");
    
    const appointments = await AltegioAppointments.find({
      isDeleted: false
    }).select('appointmentId startDateTime endDateTime');
    
    let shortLessons = 0;
    let longLessons = 0;
    
    appointments.forEach(apt => {
      const duration = (apt.endDateTime - apt.startDateTime) / (1000 * 60); // –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
      
      if (duration < 30) {
        shortLessons++;
      } else if (duration > 120) {
        longLessons++;
      }
    });
    
    console.log(`  üìä –£—Ä–æ–∫–∏ –∫–æ—Ä–æ—Ç—à–µ 30 —Ö–≤–∏–ª–∏–Ω: ${shortLessons}`);
    console.log(`  üìä –£—Ä–æ–∫–∏ –¥–æ–≤—à–µ 120 —Ö–≤–∏–ª–∏–Ω: ${longLessons}`);
    
    if (shortLessons > 0 || longLessons > 0) {
      console.log("  ‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–∏ –∑ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—é —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é");
    }
    
    // 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–∞–π–±—É—Ç–Ω—ñ —É—Ä–æ–∫–∏ –∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
    console.log("\n6Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–∫–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤:");
    
    const now = new Date();
    const futureCompletedLessons = await AltegioAppointments.find({
      startDateTime: { $gt: now },
      status: { $in: ['1', '-1'] }, // Arrived –∞–±–æ No-show
      isDeleted: false
    });
    
    if (futureCompletedLessons.length > 0) {
      console.log(`  ‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ ${futureCompletedLessons.length} –º–∞–π–±—É—Ç–Ω—ñ—Ö —É—Ä–æ–∫—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"`);
      issuesFound += futureCompletedLessons.length;
    } else {
      console.log("  ‚úÖ –õ–æ–≥—ñ–∫–∞ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∫–æ—Ä–µ–∫—Ç–Ω–∞");
    }
    
    // 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø–æ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–ª—è—Ö
    console.log("\n7Ô∏è‚É£ –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤:");
    
    // –î—É–±–ª—ñ–∫–∞—Ç–∏ –ø–æ (leadId + startDateTime + teacherId)
    const logicalDuplicates = await AltegioAppointments.aggregate([
      {
        $group: {
          _id: {
            leadId: "$leadId",
            startDateTime: "$startDateTime", 
            teacherId: "$teacherId"
          },
          count: { $sum: 1 },
          appointmentIds: { $push: "$appointmentId" }
        }
      },
      {
        $match: { count: { $gt: 1 } }
      }
    ]);
    
    if (logicalDuplicates.length > 0) {
      console.log(`  ‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ ${logicalDuplicates.length} –ª–æ–≥—ñ—á–Ω–∏—Ö –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ (—Ç–æ–π –∂–µ —É—á–µ–Ω—å, –≤—á–∏—Ç–µ–ª—å, —á–∞—Å)`);
      logicalDuplicates.forEach(dup => {
        console.log(`    - LeadId: ${dup._id.leadId}, –ß–∞—Å: ${dup._id.startDateTime}, appointmentIds: [${dup.appointmentIds.join(', ')}]`);
      });
      issuesFound += logicalDuplicates.length;
    } else {
      console.log("  ‚úÖ –õ–æ–≥—ñ—á–Ω–∏—Ö –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }
    
    // –ü—ñ–¥—Å—É–º–æ–∫
    console.log("\n" + "=".repeat(50));
    if (issuesFound === 0) {
      console.log("üéâ –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ü–†–û–ô–®–õ–ê –£–°–ü–Ü–®–ù–û!");
      console.log("‚úÖ –í—Å—ñ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ –∫–æ—Ä–µ–∫—Ç–Ω—ñ");
    } else {
      console.log(`‚ö†Ô∏è  –ó–ù–ê–ô–î–ï–ù–û ${issuesFound} –ü–†–û–ë–õ–ï–ú`);
      console.log("‚ùó –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –≤–∏—è–≤–ª–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏");
    }
    console.log("=".repeat(50));
    
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:", error.message);
    process.exit(1);
  }
}

async function fixIssues() {
  console.log("üîß –ü–æ—á–∞—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º...\n");
  
  let fixedCount = 0;
  
  try {
    require("../../db/connection");
    
    // 1. –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—É—Å—Ç–∏—Ö —Ä—è–¥–∫—ñ–≤ –Ω–∞ null
    console.log("1Ô∏è‚É£ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—É—Å—Ç–∏—Ö —Ä—è–¥–∫—ñ–≤...");
    
    const result1 = await AltegioAppointments.updateMany(
      {
        $or: [
          { leadName: "" },
          { teacherName: "" },
          { serviceName: "" }
        ]
      },
      {
        $unset: {
          leadName: "",
          teacherName: "",
          serviceName: ""
        }
      }
    );
    
    console.log(`  ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ ${result1.modifiedCount} –∑–∞–ø–∏—Å—ñ–≤ –∑ –ø—É—Å—Ç–∏–º–∏ —Ä—è–¥–∫–∞–º–∏`);
    fixedCount += result1.modifiedCount;
    
    // 2. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –∑ –∫—Ä–∏—Ç–∏—á–Ω–∏–º–∏ –ø–æ–º–∏–ª–∫–∞–º–∏
    console.log("\n2Ô∏è‚É£ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –∑ –∫—Ä–∏—Ç–∏—á–Ω–∏–º–∏ –ø–æ–º–∏–ª–∫–∞–º–∏...");
    
    const criticalErrors = await AltegioAppointments.deleteMany({
      $or: [
        { appointmentId: { $in: [null, undefined, ""] } },
        { leadId: { $in: [null, undefined, ""] } },
        { startDateTime: { $in: [null, undefined] } },
        { endDateTime: { $in: [null, undefined] } }
      ]
    });
    
    console.log(`  ‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${criticalErrors.deletedCount} –∑–∞–ø–∏—Å—ñ–≤ –∑ –∫—Ä–∏—Ç–∏—á–Ω–∏–º–∏ –ø–æ–º–∏–ª–∫–∞–º–∏`);
    fixedCount += criticalErrors.deletedCount;
    
    console.log(`\nüéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`üìä –ó–∞–≥–∞–ª–æ–º –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount} –∑–∞–ø–∏—Å—ñ–≤`);
    
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ:", error.message);
  }
}

async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    console.log(`
–í–∞–ª—ñ–¥–∞—Ü—ñ—è appointments –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö

Usage:
  node validateData.js              - –ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
  node validateData.js --fix        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏
  node validateData.js --help       - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–ø–æ–º–æ–≥—É

Examples:
  node validateData.js
  node validateData.js --fix
`);
    process.exit(0);
  }
  
  if (args.includes('--fix')) {
    await fixIssues();
  } else {
    await validateAppointments();
  }
  
  process.exit(0);
}

main();
