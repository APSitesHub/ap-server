#!/usr/bin/env node

/* eslint-disable camelcase */
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó appointments –∑ Altegio
 * –ú–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–∞—Ç –∞–±–æ –±–µ–∑ –Ω–∏—Ö (–±—É–¥–µ –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)
 */

const readline = require('readline');
const { fetchAllAppointments } = require('./fetchAllAppointments');
require("dotenv").config();

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

function isValidDate(dateString) {
  const date = new Date(dateString);
  return !isNaN(date.getTime()) && /^\d{4}-\d{2}-\d{2}$/.test(dateString);
}

async function getDateInput() {
  console.log('\n=== Altegio Appointments Sync ===\n');
  
  let startDate, endDate;
  
  while (!startDate || !isValidDate(startDate)) {
    startDate = await question('–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É (YYYY-MM-DD): ');
    if (!isValidDate(startDate)) {
      console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ YYYY-MM-DD');
    }
  }
  
  while (!endDate || !isValidDate(endDate)) {
    endDate = await question('–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∫—ñ–Ω—Ü—è (YYYY-MM-DD): ');
    if (!isValidDate(endDate)) {
      console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ YYYY-MM-DD');
    }
  }
  
  const startDateObj = new Date(startDate);
  const endDateObj = new Date(endDate);
  
  if (startDateObj > endDateObj) {
    console.log('‚ùå –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –¥–∞—Ç–∏ –∫—ñ–Ω—Ü—è');
    return await getDateInput();
  }
  
  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–Ω—ñ–≤
  const daysDiff = Math.ceil((endDateObj - startDateObj) / (1000 * 60 * 60 * 24)) + 1;
  
  console.log(`\nüìÖ –ü–µ—Ä—ñ–æ–¥: ${startDate} - ${endDate} (${daysDiff} –¥–Ω—ñ–≤)`);
  
  const confirm = await question('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/n): ');
  if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes') {
    console.log('–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞');
    process.exit(0);
  }
  
  return { startDate, endDate };
}

async function main() {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
    if (!process.env.ALTEGIO_COMPANY_ID || !process.env.ALTEGIO_COMPANY_TOKEN || !process.env.ALTEGIO_USER_TOKEN) {
      console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è:');
      console.error('ALTEGIO_COMPANY_ID, ALTEGIO_COMPANY_TOKEN, ALTEGIO_USER_TOKEN');
      process.exit(1);
    }

    let startDate, endDate;
    
    // –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    const args = process.argv.slice(2);
    if (args.length === 2) {
      [startDate, endDate] = args;
      
      if (!isValidDate(startDate) || !isValidDate(endDate)) {
        console.error('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ YYYY-MM-DD');
        process.exit(1);
      }
      
      const startDateObj = new Date(startDate);
      const endDateObj = new Date(endDate);
      
      if (startDateObj > endDateObj) {
        console.error('‚ùå –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –¥–∞—Ç–∏ –∫—ñ–Ω—Ü—è');
        process.exit(1);
      }
    } else if (args.length === 0) {
      // –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≤–≤—ñ–¥
      const dateInput = await getDateInput();
      startDate = dateInput.startDate;
      endDate = dateInput.endDate;
    } else {
      console.log('Usage: node runSync.js [start_date] [end_date]');
      console.log('Date format: YYYY-MM-DD');
      console.log('Example: node runSync.js 2025-01-01 2025-01-31');
      console.log('Or run without arguments for interactive mode');
      process.exit(1);
    }

    rl.close();

    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    console.log('üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');
    require("../../db/connection");
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
    
    console.log(`\nüöÄ –ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó appointments –∑ ${startDate} –¥–æ ${endDate}`);
    console.log('‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤...\n');
    
    const startTime = Date.now();
    const result = await fetchAllAppointments(startDate, endDate);
    const endTime = Date.now();
    
    const duration = Math.round((endTime - startTime) / 1000);
    const minutes = Math.floor(duration / 60);
    const seconds = duration % 60;
    
    console.log('\nüéâ –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('='.repeat(50));
    console.log(`üìÖ –ü–µ—Ä—ñ–æ–¥: ${startDate} - ${endDate}`);
    console.log(`üìä –û–±—Ä–æ–±–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: ${result.totalProcessed}`);
    console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–æ–≤–∏—Ö: ${result.totalSaved}`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª—ñ–≤: ${result.totalProcessed - result.totalSaved}`);
    console.log(`‚è±Ô∏è  –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${minutes}—Ö–≤ ${seconds}—Å`);
    console.log('='.repeat(50));
    
    if (result.totalSaved === 0 && result.totalProcessed > 0) {
      console.log('‚ÑπÔ∏è  –í—Å—ñ –∑–∞–ø–∏—Å–∏ –≤–∂–µ —ñ—Å–Ω—É–≤–∞–ª–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö');
    } else if (result.totalSaved > 0) {
      console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ${result.totalSaved} –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤`);
    }
    
    process.exit(0);
    
  } catch (error) {
    console.error('\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:');
    console.error(error.message);
    if (process.env.NODE_ENV === 'development') {
      console.error('\n–°—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏:');
      console.error(error.stack);
    }
    process.exit(1);
  }
}

// –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
process.on('SIGINT', () => {
  console.log('\n\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º');
  rl.close();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  rl.close();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
main();
